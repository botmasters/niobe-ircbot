/**
 * Niobe IRC Bot
 *  Exploit-DB Module
 * @author zephrax <zephrax@gmail.com>
 */

var sqlite3 = require('sqlite3'),
  db = new sqlite3.Database(__dirname + '/exploits.db'),
  exploit_base_url = 'http://kernelpanic.com.ar/exploit-db/';

var exploitdb = {
  main: function(server, from, target, message) {
    if (undefined != message.trim) {
      var parts = message.trim().split(/ +/),
        command = parts[0];

      switch (command) {
        case 'search':
          exploitdb.cmdSearch(server, from, target, parts.slice(1).join(' '));
          break;
        case 'info':
          exploitdb.cmdInfo(server, from, target, parts.slice(1).join(' '));
          break;
      }
    }
  },

  /**
   * Handles exploits search
   */
  cmdSearch: function(server, from, target, message) {
    message = '%' + message + '%';
    if (exploitdbModule.bot.modules.accountservices.module.getUserLevel(server, from, function(server, level) {
        if (level > 0) {
          var stmt = db.all('SELECT * FROM files WHERE description LIKE ? OR author LIKE ? OR type LIKE ? LIMIT 3', message, message, message, function(err, results) {
            if (err) {
              console.log('[exploit-db] Error searching');
            } else {
              if (results.length) {
                (results).forEach(function(item) {
                  exploitdbModule.bot.clients[server].say(target, item.id + ' - ' + item.description + ' ' + exploit_base_url + item.file + ' (' + item.platform + ') on ' + item.date + ' by ' + item.author);
                });
              } else {
                exploitdbModule.bot.clients[server].say(target, 'No exploits found');
              }
            }
          });
        } else {
          exploitdbModule.bot.clients[server].notice(from, 'Ha-ha-ha!?');
        }
      }));
  },

  cmdInfo: function(server, from, target, message) {
    if (exploitdbModule.bot.modules.accountservices.module.getUserLevel(server, from, function(server, level) {
        if (level > 0) {
          var stmt = db.all('SELECT * FROM files WHERE id = ?', message, function(err, results) {
            if (err) {
              console.log('[exploit-db] Error searching');
            } else {
              if (results.length) {
                (results).forEach(function(item) {
                  exploitdbModule.bot.clients[server].say(target, item.id + ' - ' + item.description + ' (' + item.date + ')');
                  exploitdbModule.bot.clients[server].say(target, 'Author: ' + item.author);
                  exploitdbModule.bot.clients[server].say(target, 'Type: ' + item.type);
                  exploitdbModule.bot.clients[server].say(target, 'Platform: ' + item.platform);
                  exploitdbModule.bot.clients[server].say(target, 'Port: ' + item.port);
                  exploitdbModule.bot.clients[server].say(target, 'File: ' + exploit_base_url + item.file);
                });
              } else {
                exploitdbModule.bot.clients[server].say(target, 'No exploit found for ID ' + message);
              }
            }
          });
        } else {
          exploitdbModule.bot.clients[server].notice(from, 'Ha-ha-ha!?');
        }
      }));
  }
};

var exploitdbModule = {
  commands: {
    chan: {
      '!exploitdb': {
        level: 20,
        callback: exploitdb.main
      }
    }
  },

  help: function(server, from) {
    this.bot.clients[server].notice(from, '!exploitdb [info [id]|search [keywords]]');
  }
};

module.exports = exploitdbModule;